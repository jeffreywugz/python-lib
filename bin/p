#!/usr/bin/env python2

"""
Usages:
  p cmd... pat=pat post=summary <input  >output
Examples:  
  ls *.png |p convert '$t.png $t.jpg'
  find . -name '*.cpp' -o -name '*.h' |p set-header.py '$t'
  cat cmds |p 'ssh $host $cmd' pat='$host:${cmd:.*}'
  ls *.py |p :'${ga.i(1)} $t'
  ls *.cpp *.h |p cat '$t' '|p' :'`cat header`' pat='^^\S*/\*.*?\*/' author=ans42 file='$t'
"""
import sys
import exceptions
import traceback
import string, re
from copy import copy
from collections import defaultdict
from itertools import groupby
from subprocess import Popen, PIPE, STDOUT

def dict_map(func, d):
    return dict([(k, func(v)) for (k,v) in list(d.items())])

def read(path):
    with open(path) as f:
        return f.read()

def write(path, content):
    with open(path, 'w') as f:
        f.write(content)

def sub(template, env={}, **vars):
    return string.Template(template).safe_substitute(env, **vars)

def li(format='%s', sep=' '):
    return lambda seq: sep.join([format% i for i in seq])

def popen(cmd):
    return Popen(cmd, shell=True, stdout=PIPE, stderr=STDOUT).communicate()[0]

def null(x):
    ''
    
def dict_updated(d, extra={}, **kw):
    new_dict = copy(d)
    new_dict.update(extra, **kw)
    return new_dict

def sub2(_str, env=globals(), **kw):
    """Example: $abc ${abc} ${range(3)|> joiner()} `cat a.txt`"""
    def normalize(str):
        return re.sub('`(.*?)`', lambda m: "${popen('%s')}"% m.group(1).replace("'", '\''), str)
    def pipe_eval(ps, env):
        return reduce(lambda x,y: y(x), [eval(p, env) for p in ps.split('|>')])
    def handle_repl(m):
        def remove_brace(x):
            return re.sub('^{(.*)}$', r'\1', x or '')
        try:
            expr = remove_brace(m.group(1)) or remove_brace(m.group(2))
            return str(pipe_eval(expr, dict_updated(env, kw)))
        except Exception, e:
            return '$%s'%(m.group(1) or m.group(2))
    return re.sub('(?s)\$(\w+)|\$({.+?})', handle_repl, normalize(_str))

def sub2x(template, env={}, **kw):
    old, cur = "", template
    new_env = dict_updated(env, **kw)
    while cur != old:
        old = cur
        cur = sub2(cur, new_env)
    return cur

def parse_cmd_args(args):
    list_args = [i for i in args if not re.match('\w+=', i)]
    kw_args = dict(i.split('=', 1) for i in args if re.match('\w+=', i))
    return list_args, kw_args

def parse_arg(args):
    def normalize(str):
        return re.sub('\$(\w+)', r'${\1:\w+}', str)
    def src2re(str):
        return re.sub(r'\${(\w+):([^}]+)}', r'(?P<\1>\2)', str)
    cmd, attrs = parse_cmd_args(args)
    pat = attrs.get('pat', '^${t:.+?}$')
    return ' '.join(cmd), src2re(normalize(pat)), attrs

class acctype:
    def __init__(self, x=None):
        self.x = x
        
    def acc(self, i, initial=None):
        if initial == None:
            if type(i) == int:
                initial = 0
            elif type(i) == str:
                initial = ''
            elif type(i) == list:
                initial = []
            elif type(i) == tuple:
                initial = ()
            else:
                initial = None
        if self.x == None:
            self.x = initial
        self.x += i
        return self.x

    def __call__(self, i, initial=None):
        return self.acc(i, initial)
    
    def __int__(self):
        return int(self.x)

    def __str__(self):
        return str(self.x)

class defaultenv(defaultdict):
    def __init__(self, factory):
        defaultdict.__init__(self, factory)

    def __getattr__(self, x):
        return self[x]
    
def sub_by_popen(pat, cmd, str, attrs):
    sys.stderr.write('sub_by_popen:%s\n'%dict(attrs, pat=pat, cmd=cmd))
    ga=defaultenv(acctype)
    static_env = dict(n=null, popen=popen, p=popen, r=read, w=write, ga=ga)
    def popen_maybe(cmd, env):
        if cmd.startswith(':'):
            return sub2x(cmd[1:], env)
        else:
            return popen(sub2x(cmd, env))
    if pat.find('^^') != -1 or pat.find('$$') != -1:
        flags = re.S
    else:
        flags = re.M|re.S
    new_attrs = dict_map(lambda v:sub2x(v, static_env), attrs)
    new_env = dict_updated(new_attrs, **static_env)
    repl_output = re.sub(pat, lambda m: popen_maybe(cmd, dict_updated(m.groupdict(), **new_env)).strip(), str, flags=flags)
    post_output = popen_maybe(attrs.get('post', ''), new_env)
    return repl_output + post_output

if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.stderr.write(__doc__)
        sys.exit(1)
    cmd, pat, attrs = parse_arg(sys.argv[1:])
    print sub_by_popen(pat, cmd, sys.stdin.read(), attrs)
