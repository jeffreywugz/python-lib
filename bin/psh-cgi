#!/usr/bin/python

import json
import cgi, cgitb
import traceback
import subprocess

cgitb.enable()

class GErr(Exception):
    def __init__(self, msg, obj=None):
        Exception(self)
        self.obj, self.msg = obj, msg

    def __str__(self):
        return "%s\n%s"%(self.msg, self.obj)

    def __repr__(self):
        return 'GErr(%s, %s)'%(repr(self.msg), repr(self.obj))

def id(): return 'pyRpc-0.0'

def popen(cmd):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.wait()
    err = p.stderr.read().decode('utf-8')
    out = p.stdout.read().decode('utf-8')
    if p.returncode != 0 or err:
        raise GErr('%s\n%s'%(err, out), cmd)
    return out
    
def get(path):
    with open(path) as f:
        return f.read()
    
def set(path, content):
    with open(path, 'w') as f:
        f.write(content)
        
args = cgi.FieldStorage()
func, args, kw = [json.loads(args.getfirst(name,default)) for name,default in (('func', '"id"'),('args', '[]'),('kw','{}'))]

result, tb = None, None
try:
    result = eval(func)(*args, **kw)
except Exception as e:
    result, tb = str(e), traceback.format_exc()
print(json.dumps([result, tb]))
