#!/usr/bin/python

import sys, os
cwd = os.path.dirname(os.path.realpath(__file__))
sys.path.extend([os.path.join(cwd, '..')])
from pprint import pformat
from common import *
from extra import *

def get_default_tasks():
    top_tasks = ['top.py', '../top.py', '../../top.py'] 
    local_tasks = ['task.py', '../task.py', '../../task.py']
    try:
        top_index = [os.path.exists(f) for f in top_tasks].index(True)
    except exceptions.ValueError:
        top_index = 0
    tasks = local_tasks[:top_index+1] + top_tasks[:top_index+1]
    tasks.reverse()
    return filter(os.path.exists, tasks)

def echo(*args, **kw_args):
    print 'args=%s, kw_args=%s'%(args, kw_args)

def eval_expr(expr):
    result = eval(expr)
    print result

def lop(op, func, *arg, **kw):
    if not len(arg) > 1: raise GErr('me_map require at least a argument as List', (arg, kw))
    list = arg[-1]
    arg = arg[:-1]
    func = eval(func)
    op = eval(op)
    def callback(i):
        new_arg = arg + (i,)
        return func(*new_arg, **kw)
    return op(callback, list)

tasks = get_default_tasks()
# print 'total tasks: %s'%tasks
for t in tasks:
    # print 'load %s'%t
    globals().update(__task_file__=t)
    execfile(t, globals())
print run_cmd(globals(), sys.argv[1:])
    
